import json
from flask import Request
from pyrus_api_handler import PyrusAPI


class ReminderPaymentType:
    def __init__(
        self, cache, request: Request, pyrus_secret_key: str, pyrus_login: str
    ):
        self.pyrus_secret_key = pyrus_secret_key
        self.pyrus_login = pyrus_login
        self.request = request
        self.cache = cache
        self.pyrus_api = PyrusAPI(self.cache, self.pyrus_login, self.pyrus_secret_key)

    def _validate_request(self):
        if self.request.headers.get("X-Pyrus-Sig") is None:
            print("‚õî The request does not have the X-Pyrus-Sig.")
            print(self.request.headers)
            return False
        if self.pyrus_secret_key is None or self.request.data is None:
            print(f"Body is {'set ‚úÖ' if self.request.data != None else 'not set ‚ùå'}")
            print(
                f"Secret is {'set ‚úÖ' if self.pyrus_secret_key != None else 'not set ‚ùå'}"
            )
            return False
        return True

    def _prepare_response(self):
        print("‚åõ Preparing response")

        task = json.loads(self.request.data)
        task_field_updates = task["comments"]["task_field_updates"]

        print("üëã task", task)

        person = f"<a href='https://pyrus.com/t#pp486746'>–¢–∞—Ç—å—è–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞</a>"
        text = "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–∏—Ç—å:<br><ul><li>–ø—Ä–∏—Ö–æ–¥–Ω—ã–π –∫–∞—Å—Å–æ–≤—ã–π –æ—Ä–¥–µ—Ä</li><li>–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–æ—Ç—á–µ—Ç –Ω–∞ –ë—É—Å—ã—Ä–µ–≤ –ê.–ê.</li><ul>"
        comment_text = "{person}<br>{text}".format(person=person, text=text)

        for field in task_field_updates:
            isPaymenType = "name" in field and field["name"] == "–¢–∏–ø –æ–ø–ª–∞—Ç—ã / –°—Ç–∞—Ç—É—Å"
            isCorrectPaymenType = (
                "value" in field
                and isinstance(field["value"], dict)
                and "choice_names" in field["value"]
                and field["value"]["choice_names"][0] == "‚úÖ–ù–∞–ª (—á–µ–∫)"
            )

            if isPaymenType and isCorrectPaymenType:
                return ('{{ "formatted_text":"{}" }}'.format(comment_text), 200)

        return "{}", 200

    def process_request(self):
        if not self._validate_request():
            return "üö´ Access Denied", 403

        print("‚úÖ Signature_correct")
        return self._prepare_response()
